local Decimals = 4
local Clock = os.clock()
local ValueText = "Value Is Now :"


local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/drillygzzly/Roblox-UI-Libs/main/1%20Tokyo%20Lib%20(FIXED)/Tokyo%20Lib%20Source.lua"))({
    cheatname = "JohnWARE",
    gamename = "Vision",
})

library:init()

local Window1  = library.NewWindow({
    title = "JohnWARE | Vision",
    size = UDim2.new(0, 510, 0.6, 6)
})

local Tab1 = Window1:AddTab("  Goalkeeper  ")
local Tab2 = Window1:AddTab("  Striker  ")
local SettingsTab = library:CreateSettingsTab(Window1)

local Section1 = Tab1:AddSection("Hitbox", 1)
local Section1b = Tab2:AddSection("Section 1", 1)

local playerName = game.Players.LocalPlayer.Name
local pfolder = game.Workspace.CharacterFolder:WaitForChild(playerName)
local hitbox = pfolder:WaitForChild("GKHitbox")

local originalSize = hitbox.Size
local hitboxWidth = originalSize.Z
local hitboxHeight = originalSize.Y
local hitboxLength = originalSize.X

local hitboxExpanderToggle

Section1:AddToggle({
    text = "Hitbox Expander",
    state = false,
    risky = false,
    tooltip = "tooltip1",
    flag = "Toggle_1",
    callback = function(v)
        hitboxExpanderToggle = v
        if not v then
            hitbox.Size = originalSize
            print(ValueText, "Hitbox reverted to original size.")
        else
            hitbox.Size = Vector3.new(hitboxWidth, hitboxHeight, hitboxLength)
        end
    end
}):AddBind({
    enabled = false,
    text = "Keybind1",
    tooltip = "tooltip1",
    mode = "toggle",
    bind = "None",
    flag = "ToggleKey_1",
    state = false,
    nomouse = false,
    risky = false,
    noindicator = false,
    callback = function(v)
        print(ValueText, v)
    end,
    keycallback = function(v)
        print(ValueText, v)
    end
})

Section1:AddBox({
    enabled = false,
    name = "TextBox1",
    flag = "TextBox_1",
    input = "PlaceHolder1",
    focused = false,
    risky = false,
    callback = function(v)
        print(ValueText, v)
    end
})

Section1:AddSeparator({
    enabled = false,
    text = "Separator1"
})

Section1:AddButton({
    enabled = false,
    text = "Button1",
    tooltip = "tooltip1",
    confirm = true,
    risky = false,
    callback = function()
        print("Pressed!")
    end
})

Section1:AddSlider({
    enabled = true,
    text = "Hitbox Width",
    tooltip = "Width of your hitbox.",
    flag = "Slider_Width",
    suffix = " Studs",
    dragging = true,
    focused = false,
    min = 1,
    max = 15,
    increment = 1,
    risky = false,
    callback = function(v)
        -- Only set the hitbox width if the toggle is active
        if hitboxExpanderToggle then
            hitboxWidth = v -- Update the width value
            hitbox.Size = Vector3.new(hitboxWidth, hitboxHeight, hitboxLength) -- Update hitbox size
            print(ValueText, "Width set to:", hitboxWidth)
        else
            print(ValueText, "Hitbox Expander is not enabled. Slider is inactive.")
        end
    end
})

Section1:AddSlider({
    enabled = true,
    text = "Hitbox Height",
    tooltip = "Height of your hitbox.",
    flag = "Slider_Height",
    suffix = " Studs",
    dragging = true,
    focused = false,
    min = 1,
    max = 15,
    increment = 1,
    risky = false,
    callback = function(v)
        if hitboxExpanderToggle then
            hitboxHeight = v
            hitbox.Size = Vector3.new(hitboxWidth, hitboxHeight, hitboxLength)
            print(ValueText, "Height set to:", hitboxHeight)
        else
            print(ValueText, "Hitbox Expander is not enabled. Slider is inactive.")
        end
    end
})

Section1:AddList({
    enabled = false,
    text = "Selection", 
    tooltip = "tooltip1",
    selected = "",
    multi = false,
    open = false,
    max = 4,
    values = {"1", "2", "3"},
    risky = false,
    callback = function(v)
        print(ValueText, v)
    end
})

Section1:AddColor({
    enabled = false,
    text = "Color1",
    tooltip = "tooltip1",
    color = Color3.fromRGB(255, 255, 255),
    flag = "Color_1",
    trans = 0,
    open = false,
    risky = false,
    callback = function(v)
        print(ValueText, v)
    end
})

local Time = (string.format("%."..tostring(Decimals).."f", os.clock() - Clock))
library:SendNotification(("Loaded In "..tostring(Time)), 6)
