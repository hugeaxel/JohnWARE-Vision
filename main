local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local ball = game.Workspace:FindFirstChild("Ball")
local playerName = game.Players.LocalPlayer.Name
local charFolder = game.Workspace:FindFirstChild("CharacterFolder")
local plrModel = charFolder:FindFirstChild(playerName)
local humanoidRootPart = plrModel:FindFirstChild("HumanoidRootPart")
local redPos = Vector3.new(-752, 58, -442)
local bluePos = Vector3.new(-752, 58, 323)

local redPart = Instance.new("Part")
redPart.Size = Vector3.new(1, 1, 1)
redPart.Position = redPos
redPart.Anchored = true
redPart.BrickColor = BrickColor.new("Bright red")
redPart.Parent = game.Workspace

local bluePart = Instance.new("Part")
bluePart.Size = Vector3.new(1, 1, 1)
bluePart.Position = bluePos
bluePart.Anchored = true
bluePart.BrickColor = BrickColor.new("Bright blue")
bluePart.Parent = game.Workspace


local Window = Rayfield:CreateWindow({
	Name = "JohnWARE | Vision",
	LoadingTitle = "JohnWARE | Vision",
	LoadingSubtitle = "jaxel and co.",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "JohnWARE",
		FileName = "Vision Hub"
	},
	KeySystem = false, -- Set this to true to use their key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		SaveKey = true,
		Key = "ABCDEF"
	}
})

Rayfield:Notify("Title Example", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image

local Tab = Window:CreateTab("Goalkeeper", 4483362458) -- Title, Image
local Tab2 = Window:CreateTab("Striker", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Hitbox")
local Section = Tab2:CreateSection("Blatant")

--[[local Button1 = Tab2:CreateButton({
	Name = "TP to Enemy Goal",
	Callback = function()
		local playerName = game.Players.LocalPlayer.Name
        local plr = game.Players:FindFirstChild(playerName)
        local team = plr and plr.Team -- Ensures 'plr' exists before accessing Team
    print("Player's team is:", team)
    if team.Name == "Team 1" then
        humanoidRootPart.CFrame = redPart.CFrame
        else
        humanoidRootPart.CFrame = bluePart.CFrame
    end
end,
})]]--


local Toggle1 = Tab:CreateToggle({
	Name = "Toggle Hitbox Extender",
	CurrentValue = false,
	Flag = "ToggleHBGK", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	end,
})

local isLooping = false -- Flag to control the loop

local Toggle2 = Tab2:CreateToggle({
    Name = "Toggle Loop Tackle",
    CurrentValue = false,
    Flag = "ToggleLT", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        isLooping = Value -- Set the looping flag based on the toggle state

        if isLooping then
            -- If the toggle is turned on, start the loop in a new coroutine
            coroutine.wrap(function()
                while isLooping do
                    wait(0.1) -- Wait for a short duration
                    game:GetService("ReplicatedStorage").Remotes.tckl:FireServer()
                    print("Tackled!")
                end
            end)() -- Start the coroutine
        end
    end
})


local Toggle3 = Tab2:CreateToggle({
	Name = "Toggle Loop Tackle + TP to Ball",
	CurrentValue = false,
	Flag = "ToggleLTTP",
	Callback = function(Value)
        isLooping = Value -- Set the looping flag based on the toggle state

        if isLooping then
            -- If the toggle is turned on, start the loop in a new coroutine
            coroutine.wrap(function()
                while isLooping do
                    local currentRotation = humanoidRootPart.CFrame - humanoidRootPart.Position
                    humanoidRootPart.CFrame = CFrame.new(ball.Position) * currentRotation -- Set only the position, preserving rotation
                    wait(0.1) -- Wait for a short duration
                    game:GetService("ReplicatedStorage").Remotes.tckl:FireServer()
                    print("Tackled!")
                end
            end)() -- Start the coroutine
        end
    end
})

local Section = Tab2:CreateSection("Hitbox")

local Slider1 = Tab:CreateSlider({
	Name = "Hitbox Width",
	Range = {1, 15},
	Increment = 1,
	Suffix = "Studs",
	CurrentValue = 1,
	Flag = "SliderWidthGK", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})

local Slider2 = Tab:CreateSlider({
	Name = "Hitbox Length",
	Range = {1, 15},
	Increment = 1,
	Suffix = "Studs",
	CurrentValue = 1,
	Flag = "SliderLengthGK", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(v)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})

local Label = Tab:CreateLabel("Label Example")

local Paragraph = Tab:CreateParagraph({Title = "Paragraph Example", Content = "Paragraph Example"})

local Input = Tab:CreateInput({
	Name = "Input Example",
	PlaceholderText = "Input Placeholder",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
		-- The function that takes place when the input is changed
    		-- The variable (Text) is a string for the value in the text box
	end,
})

local Keybind = Tab:CreateKeybind({
	Name = "Keybind Example",
	CurrentKeybind = "Q",
	HoldToInteract = false,
	Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Keybind)
		-- The function that takes place when the keybind is pressed
    		-- The variable (Keybind) is a boolean for whether the keybind is being held or not (HoldToInteract needs to be true)
	end,
})

local Dropdown = Tab:CreateDropdown({
	Name = "Dropdown Example",
	Options = {"Option 1","Option 2"},
	CurrentOption = "Option 1",
	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
	  	  -- The function that takes place when the selected option is changed
    	  -- The variable (Option) is a string for the value that the dropdown was changed to
	end,
})

local Button = Tab:CreateButton({
	Name = "Destroy UI",
	Callback = function()
		Rayfield:Destroy()
	end,
})

-- Extras

-- getgenv().SecureMode = true -- Only Set To True If Games Are Detecting/Crashing The UI

-- Rayfield:Destroy() -- Destroys UI

-- Rayfield:LoadConfiguration() -- Enables Configuration Saving

-- Section:Set("Section Example") -- Use To Update Section Text

-- Button:Set("Button Example") -- Use To Update Button Text

-- Toggle:Set(false) -- Use To Update Toggle

-- Slider:Set(10) -- Use To Update Slider Value

-- Label:Set("Label Example") -- Use To Update Label Text

-- Paragraph:Set({Title = "Paragraph Example", Content = "Paragraph Example"}) -- Use To Update Paragraph Text

-- Keybind:Set("RightCtrl") -- Keybind (string) -- Use To Update Keybind

-- Dropdown:Set("Option 2") -- The new option value -- Use To Update/Set New Dropdowns
